---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: postgres
  ports:
    - name: patroni
      port: 8008
      targetPort: 8008
    - name: postgres
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  serviceName: postgres
  replicas: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      terminationGracePeriodSeconds: 1
      initContainers:
        - name: create-data-dir
          image: alpine:3.8
          volumeMounts:
            - name: pgdata
              mountPath: /data
          command:
            - sh
            - -c
            - |
              mkdir -p /data/batman
              chown 105:107 /data/batman  # postgres:postgres in the patroni image
              chmod 700 /data/batman
      containers:
        - name: postgres
          image: registry.opensource.zalan.do/acid/patroni:latest
          ports:
            - name: patroni
              containerPort: 8008
            - name: postgres
              containerPort: 5432
          volumeMounts:
            - name: pgdata
              mountPath: /data
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          command:
            - sh
            - -c
            - |
              export PATRONI_SCOPE="batman"
              export PATRONI_NAME="$(hostname | sed 's/-/_/g')"
              export PATRONI_ETCD_HOST="etcd:2379"
              export PATRONI_RESTAPI_CONNECT_ADDRESS="${POD_IP}:8008"
              export PATRONI_RESTAPI_LISTEN="0.0.0.0:8008"
              export PATRONI_admin_PASSWORD="admin"
              export PATRONI_admin_OPTIONS="createdb, createrole"
              export PATRONI_POSTGRESQL_CONNECT_ADDRESS="${POD_IP}:5432"
              export PATRONI_POSTGRESQL_LISTEN="0.0.0.0:5432"
              export PATRONI_POSTGRESQL_DATA_DIR="data/${PATRONI_SCOPE}"
              export PATRONI_REPLICATION_USERNAME="replicator"
              export PATRONI_REPLICATION_PASSWORD="abcd"
              export PATRONI_SUPERUSER_USERNAME="postgres"
              export PATRONI_SUPERUSER_PASSWORD="postgres"
              export PATRONI_POSTGRESQL_PGPASS="$HOME/.pgpass"

              cat > /patroni/postgres.yaml <<__EOF__
              bootstrap:
                dcs:
                  synchronous_mode: true
                  synchronous_mode_strict: true
                  postgresql:
                    use_pg_rewind: false
                    use_slots: false
                    parameters:
                      synchronous_commit: "on"
                      synchronous_standby_names: "*"

                pg_hba:
                  - host all all 0.0.0.0/0 md5
                  - host replication replicator 0.0.0.0/0 md5
              __EOF__

              exec python /patroni.py /patroni/postgres.yaml

  volumeClaimTemplates:
    - metadata:
        name: pgdata
      spec:
        storageClassName: ssd
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: "5Gi"
